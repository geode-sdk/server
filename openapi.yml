openapi: "3.1.0"
info:
  title: Geode Index
  description: Documentation for the Geode Index API
  version: "1.0.0"

servers:
  - url: https://api.geode-sdk.org/

tags:
  - name: mods
    description: Access to Index mods

  - name: user
    description: User management

paths:
  /:
    get:
      summary: Health check
      description: Returns a 200 OK if the index is up and running
      responses:
        "200":
          description: OK

  /v1/login/github:
    post:
      tags:
        - user
      summary: Login with GitHub OAuth
      description: This endpoint is used to login with GitHub OAuth. It returns a UUID which is used for authentication.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: "null"
                  payload:
                    type: object
                    properties:
                      uuid:
                        type: string
                        description: The UUID used to identify the login attempt at POST /v1/login/github/poll
                        example: "a1b2c3d4-1234-5678-9abc-1234567890ab"
                      interval:
                        type: integer
                        description: The interval in seconds to poll the server for the login status
                        example: 5
                      uri:
                        type: string
                        description: The GitHub URI for OAuth verification
                        example: "https://github.com/login/device"
                      code:
                        type: string
                        description: The code used to complete the OAuth process
                        example: "ABCD-EFGH"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /v1/login/github/poll:
    post:
      tags:
        - user
      summary: Poll the server for the login status
      description: Used to poll the API for the OAuth status. Returns a token if the login was successful.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                uuid:
                  type: string
                  description: The UUID used to identify the login attempt, taken from POST /v1/login/github
                  example: "a1b2c3d4-1234-5678-9abc-1234567890ab"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
                description: The token used for authentication
                example: "a1b2c3d4-1234-5678-9abc-1234567890ab"
        "400":
          description: Bad request - for different reasons, like IP mismatch, interval not being respected, etc.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  payload:
                    type: "null"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /v1/mods:
    get:
      tags:
        - mods
      summary: Search all mods, paginated
      description: Returns a list of mods, paginated. Does not include about.md and changelog.md. Does not include dependencies and incompatibilities.

      parameters:
        - name: query
          in: query
          description: Search query
          schema:
            type: string
        - name: gd
          in: query
          description: Geometry Dash version
          required: true
          schema:
            $ref: "#/components/schemas/GDVersionString"
        - name: platforms
          in: query
          description: Platforms that mods have to support, comma separated [win,android32,android64,mac,ios]
          example: "win,android32,android64"
          schema:
            type: string
        - name: tags
          in: query
          description: Tags that mods have to have, comma separated. Can only use allowed tags.
          example: "gameplay,enhancement"
          schema:
            type: string
        - name: featured
          in: query
          description: Filter by featured mods
          schema:
            type: boolean
        - name: sort
          in: query
          description: Sort by a specific enum field, in descending order. Default is "downloads"
          example: "downloads"
          schema:
            type: enum
            enum:
              - downloads
              - recently_updated
              - recently_published
        - name: developer
          in: query
          description: Filter by developer username
          schema:
            type: string
        - name: status
          in: query
          description: Filter by mod version status (rejected is admin only)
          schema:
            $ref: "#/components/schemas/ModVersionStatus"
        - name: pending_validation
          in: query
          description: Filter by pending validation status (admin only)
          schema:
            type: boolean
        - $ref: "#/components/parameters/GeodeVersionQuery"
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/PerPage"

      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Mod"
        "500":
          $ref: "#/components/responses/InternalServerError"
    post:
      tags:
        - mods
      summary: Create a new mod
      description: This endpoint is only used for adding a new mod. For creating a new version, use the POST /mods/{id}/versions endpoint.
      security:
        - bearerAuth: []

      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                download_link:
                  type: string
                  description: The download URL for the .geode file. You can use a Github Release for this.
                  examples:
                    - "https://github.com/geode-sdk/NodeIDs/releases/download/v1.0.0/geode.node-ids.geode"
                    - "https://github.com/geode-sdk/DevTools/releases/download/v1.3.0/geode.devtools.geode"

      responses:
        "204":
          description: No Content (Mod created)
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /v1/mods/{id}:
    get:
      tags:
        - mods
      summary: Get info for a mod
      description: Returns info for the mod, without dependencies and incompatibilities.
      parameters:
        - $ref: "#/components/parameters/ModID"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Mod"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    put:
      tags:
        - mods
      summary: Update a mod (admin only)
      description: At the moment it's only used to set a mod to featured / not featured
      security:
        - bearerAuth: []

      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                featured:
                  type: boolean
                  description: Whether the mod should be featured or not
                  example: true

      parameters:
        - $ref: "#/components/parameters/ModID"
      responses:
        "204":
          description: No Content (Mod updated)
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /v1/mods/{id}/logo:
    get:
      tags:
        - mods
      summary: Get the logo for a mod
      description: Returns the logo for the mod
      parameters:
        - $ref: "#/components/parameters/ModID"
      responses:
        "200":
          description: Returns the mod logo
          content:
            image/png:
              schema:
                type: string
                format: binary
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /v1/mods/{id}/versions/latest:
    get:
      tags:
        - mods
      summary: Get info for the latest version of a mod
      description: Returns info for the current latest approved version of the mod
      parameters:
        - $ref: "#/components/parameters/ModID"
        - $ref: "#/components/parameters/Platforms"
        - name: gd
          in: query
          description: Geometry Dash version
          schema:
            $ref: "#/components/schemas/GDVersionString"

      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ModVersion"

  /v1/mods/{id}/versions:
    post:
      tags:
        - mods
      summary: Create a new version of a mod
      description: This endpoint is only used for adding a new version of a mod. For creating a new mod, use the POST /mods endpoint.
      security:
        - bearerAuth: []

      parameters:
        - $ref: "#/components/parameters/ModID"

      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                download_link:
                  type: string
                  description: The download URL for the .geode file. You can use a Github Release for this.
                  examples:
                    - "https://github.com/geode-sdk/NodeIDs/releases/download/v1.0.0/geode.node-ids.geode"
      responses:
        "204":
          description: No Content (Mod version created)
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /v1/mods/{id}/versions/{version}:
    get:
      tags:
        - mods
      summary: Get info for a specific version of a mod
      parameters:
        - $ref: "#/components/parameters/ModID"
        - $ref: "#/components/parameters/ModVersion"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ModVersion"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"
    put:
      tags:
        - mods
      summary: Update a specific version of a mod (admin only)
      security:
        - bearerAuth: []

      parameters:
        - $ref: "#/components/parameters/ModID"
        - $ref: "#/components/parameters/ModVersion"

      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  $ref: "#/components/schemas/ModVersionStatus"
                info:
                  required: false
                  type: string
                  description: "Extra information about why that status was picked"

      responses:
        "204":
          description: No Content (Mod updated)
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /v1/mods/{id}/versions/{version}/download:
    get:
      tags:
        - mods
      summary: Download a specific version of a mod
      parameters:
        - $ref: "#/components/parameters/ModID"
        - $ref: "#/components/parameters/ModVersion"
      responses:
        "302":
          description: Redirect to the actual mod download link
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /v1/mods/{id}/versions/latest/download:
    get:
      tags:
        - mods
      summary: Download the latest available version of a mod
      parameters:
        - $ref: "#/components/parameters/ModID"
      responses:
        "302":
          description: Redirect to the actual mod download link
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /v1/mods/updates:
    get:
      tags:
        - mods
      summary: Get available mod updates
      description: Gets latest versions of the requested mods

      parameters:
        - name: platform
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Platform"
        - name: ids
          in: query
          required: true
          schema:
            type: string
            description: Semicolon separated list of mod IDs
            example: "geode.devtools;geode.nodeids"

      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: "null"
                  payload:
                    type: array
                    items: "#/components/schemas/ModUpdate"

  /v1/mods/{id}/developers:
    post:
      tags:
        - mods
      summary: Add a developer to a mod
      description: This endpoint is only used for adding a developer to a mod. Must be the owner of the mod to access this endpoint.
      security:
        - bearerAuth: []

      parameters:
        - $ref: "#/components/parameters/ModID"

      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: The username of the developer. At the moment it's the same as the GitHub username of the developer.
                  example: "fleeym"

      responses:
        "204":
          description: No Content (Developer added)
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /v1/mods/{id}/developers/{username}:
    delete:
      tags:
        - mods
      summary: Remove a developer from a mod
      description: This endpoint is only used for removing a developer from a mod. Must be the owner the mod to access this endpoint.
      security:
        - bearerAuth: []

      parameters:
        - $ref: "#/components/parameters/ModID"
        - name: username
          in: path
          required: true
          schema:
            type: string
            example: "fleeym"

      responses:
        "204":
          description: No Content (Developer removed)
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /v1/me:
    get:
      tags:
        - user
      summary: Get your own info
      security:
        - bearerAuth: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeveloperProfile"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"
    put:
      tags:
        - user
      summary: Update your own info (just display name at the moment)
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                display_name:
                  type: string
                  example: "Flame"
      responses:
        "204":
          description: No Content (User updated)
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /v1/me/mods:
    get:
      tags:
        - user
      summary: Get your own mods
      parameters:
        - name: validated
          in: query
          description: Filter by validation status
          schema:
            type: boolean
          required: false
      security:
        - bearerAuth: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: ""
                  payload:
                    type: array
                    items:
                      $ref: "#/components/schemas/DeveloperMod"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /v1/me/token:
    delete:
      tags:
        - user
      summary: Revoke current token
      security:
        - bearerAuth: []
      responses:
        "204":
          description: No Content (Token revoked)
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /v1/me/tokens:
    delete:
      tags:
        - user
      summary: Revoke all tokens
      security:
        - bearerAuth: []
      responses:
        "204":
          description: No Content (Tokens revoked)
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /v1/mods/{id}/versions/{version}/feedback:
    get:
      tags:
        - mods
      summary: Get feedback for a specific version of a mod
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/ModID"
        - $ref: "#/components/parameters/ModVersion"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                  $ref: "#/components/schemas/ModFeedback"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    post:
      tags:
        - mods
      summary: Add feedback for a specific version of a mod
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/ModID"
        - $ref: "#/components/parameters/ModVersion"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                feedback_type:
                  type: string
                  enum:
                    - Positive
                    - Negative
                    - Suggestion
                    - Note
                  description: Type of feedback - positive/negative modifies score, note is mod dev only
                  example: Positive
                feedback:
                  type: string
                  description: The feedback given by the reviewer
                  example: "This mod is great!"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  payload:
                    description: The ID of the new feedback (for use in deleting)
                    type: integer
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    delete:
      tags:
        - mods
      summary: Delete feedback for a specific version of a mod
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/ModID"
        - $ref: "#/components/parameters/ModVersion"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  description: The ID of the feedback to delete
                  example: 1
      responses:
        "204":
          description: No Content (Feedback deleted)
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: uuid
  schemas:
    ModID:
      type: string
      pattern: '[a-z0-9_\-]+\.[a-z0-9_\-]+'
      description: Mod ID
      examples:
        - geode.devtools
        - mat.circle-tool

    ModVersionString:
      type: string
      pattern: '^v?\d+\.\d+\.\d+(?:-.+)?$'
      examples:
        - "v1.0.0"
        - "v2.3.4"
        - "1.3.0"
        - "v1.0.0-beta"

    GDVersionString:
      type: string
      examples:
        - "2.200"
        - "2.204"
        - "2.205"

    GDVersionObject:
      type: object
      properties:
        win:
          anyOf:
            - type: "null"
            - $ref: "#/components/schemas/GDVersionString"
        mac:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/GDVersionString"
        ios:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/GDVersionString"
        android32:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/GDVersionString"
        android64:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/GDVersionString"

    ModUpdate:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/ModID"
        version:
          $ref: "#/components/schemas/ModVersionString"
        download_link:
          type: string
          examples:
            - "https://api.geode-sdk.com/v1/mods/geode.nodeids/versions/1.0.0/download"
            - "https://api.geode-sdk.com/v1/mods/geode.devtools/versions/1.0.0/download"
        replacement:
          oneOf:
            - "null"
            - $ref: "#/components/schemas/ModReplacement"
        dependencies:
          type: array
          items:
            $ref: "#/components/schemas/ModDependency"
        incompatibilities:
          type: array
          items:
            $ref: "#/components/schemas/ModIncompatibility"

    ModReplacement:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/ModID"
        version:
          $ref: "#/components/schemas/ModVersionString"
        download_link:
          type: string
          examples:
            - "https://api.geode-sdk.com/v1/mods/geode.nodeids/versions/1.0.0/download"
            - "https://api.geode-sdk.com/v1/mods/geode.devtools/versions/1.0.0/download"
        dependencies:
          type: array
          items:
            $ref: "#/components/schemas/ModDependency"
        incompatibilities:
          type: array
          items:
            $ref: "#/components/schemas/ModIncompatibility"

    ModDependency:
      type: object
      properties:
        mod_id:
          $ref: "#/components/schemas/ModID"
        version:
          type: string
          examples:
            - ">1.0.0"
            - "*"
            - "<=2.0.0"
        importance:
          $ref: "#/components/schemas/DependencyImportance"

    ModIncompatibility:
      type: object
      properties:
        mod_id:
          $ref: "#/components/schemas/ModID"
        version:
          type: string
          examples:
            - ">1.0.0"
            - "*"
            - "<=2.0.0"
        importance:
          $ref: "#/components/schemas/IncompatibilityImportance"

    Mod:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/ModID"
        repository:
          oneOf:
            - type: "null"
            - type: string
          examples:
            - "https://github.com/geode-sdk/geode"
        developers:
          type: array
          items:
            $ref: "#/components/schemas/ModDeveloper"
        download_count:
          type: integer
        tags:
          type: array
          items:
            type: string
            examples:
              - "enhancement"
              - "gameplay"
        versions:
          type: array
          items:
            $ref: "#/components/schemas/ModVersion"
        about:
          type: string
          examples:
            - "This mod adds bugfixes to the game"
        changelog:
          type: string
          examples:
            - "Fixed a bug with the mod"
      required:
        - id

    ModVersion:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
          examples:
            - Devtools
        download_count:
          type: integer
        description:
          type: string
        early_load:
          type: boolean
        api:
          type: boolean
        geode:
          $ref: "#/components/schemas/ModVersionString"
        version:
          $ref: "#/components/schemas/ModVersionString"
        download_link:
          type: string
          examples:
            - "https://api.geode-sdk.com/v1/mods/geode.nodeids/versions/1.0.0/download"
            - "https://api.geode-sdk.com/v1/mods/geode.devtools/versions/1.0.0/download"
        hash:
          type: string
          description: This is generated serverside
          examples:
            - "3c8d6d3d48967758055a5569a24617c3e6fdc456fbf6a4adbf1222954e61b634"
        gd:
          description: The GD version the mod supports (can be specified per platform)
          oneOf:
            - $ref: "#/components/schemas/GDVersionString"
            - $ref: "#/components/schemas/GDVersionObject"
        tags:
          type: array
          items:
            type: string
        mod_id:
          $ref: "#/components/schemas/ModID"
        dependencies:
          type: array
          items:
            $ref: "#/components/schemas/ModDependency"
        incompatibilities:
          type: array
          items:
            $ref: "#/components/schemas/ModIncompatibility"

    ModVersionStatus:
      type: string
      enum:
        - approved
        - rejected
        - pending
        - unlisted

    DependencyImportance:
      type: string
      enum:
        - suggested
        - recommended
        - required

    IncompatibilityImportance:
      type: string
      enum:
        - breaking
        - conflicting
        - superseded

    ModDeveloper:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
          description: The username of the developer. At the moment it's the same as the GitHub username of the developer.
          examples:
            - fleeym
        display_name:
          type: string
          examples:
            - Flame
        verified:
          type: boolean,
          description: Whether the developer can post mods without admin verification
          examples:
            - true
        admin:
          type: boolean,
          description: Whether the developer is an admin (which can verify mods and developers)
          examples:
            - true
        is_owner:
          type: boolean,
          description: Whether the developer is the owner of the mod
          examples:
            - true

    DeveloperProfile:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
          description: The username of the developer. At the moment it's the same as the GitHub username of the developer.
          examples:
            - fleeym
        display_name:
          type: string
          examples:
            - Flame
        verified:
          type: boolean,
          description: Whether the developer can post mods without admin verification
          examples:
            - true
        admin:
          type: boolean,
          description: Whether the developer is an admin (which can verify mods and developers)
          examples:
            - true

    DeveloperMod:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/ModID"
        featured:
          type: boolean
          description: Whether the mod is featured or not
          example: true
        download_count:
          type: integer
          example: 500
        versions:
          type: array
          items:
            $ref: "#/components/schemas/DeveloperModVersion"

    DeveloperModVersion:
      type: object
      properties:
        name:
          type: string
          examples:
            - Devtools
        version:
          $ref: "#/components/schemas/ModVersionString"
        download_count:
          type: integer
          example: 500
        validated:
          type: boolean
          deprecated: true
          example: true
          description: True if the mod is accepted. Deprecated in favor of the status field
        status:
          $ref: "#/components/schemas/ModVersionStatus"
        info:
          type: string
          nullable: true
          description: Information given with the version's status (typically a reason)

    Platform:
      type: string
      enum:
        - win
        - mac
        - android32
        - android64
        - ios

    Reviewer:
      type: object
      properties:
        id:
          type: integer
          description: The developer ID of the reviewer
        display_name:
          type: string
          description: The display name of the reviewer
        admin:
          type: boolean
          description: Whether the reviewer is an admin
        dev:
          type: boolean
          description: Whether the reviewer is a developer of the mod

    Score:
      type: object
      properties:
        score:
          type: integer
          description: The score of the mod, calculated as a sum of all feedback where positive is 1 and negative is -1
        positive:
          type: integer
          description: The number of positive feedback
        negative:
          type: integer
          description: The number of negative feedback

    ModFeedbackOne:
      type: object
      properties:
        reviewer:
          $ref: "#/components/schemas/Reviewer"
          description: The reviewer that gave the feedback
        feedback_type:
          type: string
          enum:
            - Positive
            - Negative
            - Suggestion
            - Note
          description: Type of feedback - positive/negative modifies score, note is mod dev only
        feedback:
          type: string
          description: The feedback given by the reviewer
        decision:
          type: boolean
          description: Whether or not this feedback was used to make a decision

    ModFeedback:
      type: object
      properties:
        score:
          $ref: "#/components/schemas/Score"
          description: The mod's score
        mod_id:
          $ref: "#/components/schemas/ModID"
        mod_version:
          $ref: "#/components/schemas/ModVersionString"
        feedback:
          type: array
          items:
              $ref: "#/components/schemas/ModFeedbackOne"

  parameters:
    ModID:
      name: id
      description: Mod ID
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/ModID"

    ModVersion:
      name: version
      description: Mod Version
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/ModVersionString"

    GeodeVersionQuery:
      name: geode
      in: query
      description: Geode version being used
      required: false
      schema:
        $ref: "#/components/schemas/ModVersionString"

    Page:
      name: page
      in: query
      description: Page number
      required: false
      example: 1
      schema:
        type: integer

    PerPage:
      name: per_page
      in: query
      description: Number of elements to fetch per page
      required: false
      example: 10
      schema:
        type: integer

    Platforms:
      name: platforms
      in: query
      description: Platforms that mods have to support, comma separated [win,android32,android64,mac,ios]
      example: "win,android32,android64"
      schema:
        type: string
  responses:
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "You are not authorized to access this resource"
              payload:
                type: "null"
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
              payload:
                type: "null"
    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
              payload:
                type: "null"
    ForbiddenError:
      description: Forbidden
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
              payload:
                type: "null"
    NotFoundError:
      description: Not Found
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
              payload:
                type: "null"